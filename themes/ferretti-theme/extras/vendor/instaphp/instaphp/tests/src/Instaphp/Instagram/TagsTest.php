<?php

namespace Instaphp\Instagram;
include_once 'InstagramTest.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-22 at 20:17:07.
 * @ignore
 */
class TagsTest extends InstagramTest
{

	/**
	 * @var Tags
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Tags($this->config);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}
	
	/**
	 * @covers Instagram::__construct
	 */
	public function testInstanceOf()
	{
		$this->assertInstanceOf('\Instaphp\Instagram\Tags', $this->object);
		$this->assertInstanceOf('\Instaphp\Instagram\Instagram', $this->object);
	}

	/**
	 * @covers Instaphp\Instagram\Tags::Info
	 */
	public function testInfo()
	{
		$res = $this->object->Info('test');
		$this->assertInstanceOf('\Instaphp\Instagram\Response', $res);
		$this->assertNotEmpty($res->data);
	}

    public function testInfoNonLatin()
    {
        $res = $this->object->Info('футбол');
        $this->assertInstanceOf('\Instaphp\Instagram\Response', $res);
		$this->assertNotEmpty($res->data);

    }

	/**
	 * @covers Instaphp\Instagram\Tags::Recent
	 */
	public function testRecent()
	{
		$res = $this->object->Recent('test', ['count' => 5]);
		$this->assertInstanceOf('\Instaphp\Instagram\Response', $res);
		$this->assertNotEmpty($res->data);
		$this->assertNotEmpty($res->pagination);
		$this->assertEquals(200, $res->meta['code']);
		
	}

	/**
	 * @covers Instaphp\Instagram\Tags::Search
	 */
	public function testSearch()
	{
		$res = $this->object->Search('insta', ['count' => 10]);
		$this->assertInstanceOf('\Instaphp\Instagram\Response', $res);
		$this->assertNotEmpty($res->data);
		$this->assertEquals(200, $res->meta['code']);
	}

	/**
	 * @covers Instaphp\Instagram\Tags::MultiSearch
	 * @todo   Implement testMultiSearch().
	 */
	public function testMultiSearch()
	{
		$res = $this->object->MultiSearch('test insta', ['count' => 10]);
		$this->assertNotEmpty($res);
		$this->assertInstanceOf('\Instaphp\Instagram\Response', $res[0]);
		$res = $this->object->MultiSearch(['test', 'insta'], ['count' => 10]);
		$this->assertNotEmpty($res);
		$this->assertInstanceOf('\Instaphp\Instagram\Response', $res[0]);
	
			
	}

}
